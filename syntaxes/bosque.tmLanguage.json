{
	"name": "Bosque",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#string-double"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.bosque"
						}
					},
					"begin": "%%",
					"end": "$",
					"name": "comment.line.double-dash.bosque"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.bosque"
						}
					},
					"begin": "%\\*\\*",
					"end": "\\*%",
					"name": "comment.multiline.double-dash.bosque"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.bosque"
						}
					},
					"begin": "%\\*",
					"end": "\\*%",
					"name": "comment.multiline.double-dash.bosque"
				}
			]
		},
		"string-double": {
			"name": "string.quoted.double.bosque",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bosque"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bosque"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.bosque",
					"match": "'"
				}
			]
		},
		"string-single": {
			"name": "string.quoted.single.bosque",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bosque"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bosque"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.bosque",
					"match": "\""
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.bosque",
					"match": "\\b(abort|assert|if|elif|else|fn|pred|let|match|ref|return|switch|then|var|yield|ensures|invariant|example|requires|validate|softcheck|errtest|chektest)\\b"
				},
				{
					"name": "keyword.bosque",
					"match": "\\b(recursive?|recursive|action|_debug|abort|assert|bsqon|example|do|if|elif|else|fail|fn|pred|implements|let|match|ref|return|switch|then|type|var|yield|debug|release|safety|spec|test|api|as|concept|const|declare|enum|entity|ensures|field|function|invariant|method|namespace|of|provides|requires|in|task|datatype|using|validate|when|event|status|resource|predicate|softcheck|errtest|chektest|operator|variant)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.bosque",
					"match": "\\b(([0-9]+)[inIN])\\b"
				},
				{
					"name": "constant.numeric.bosque",
					"match": "\\b((([0-9]+))[R]|(([0-9]+)/([0-9]+)[R]))\\b"
				},
				{
					"name": "constant.numeric.bosque",
					"match": "\\b(([0-9]+.[0-9]+([eE][-+]?[0-9]+)?[fd]))\\b"
				},
				{
					"name": "constant.numeric.bosque",
					"match": "\\b([0-9]+)\\b"
				},
				{
					"name": "constant.language",
					"match": "\\b(none|true|false|fail|ok|some|result|option|env|this|self)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "entity.name.type.bosque",
					"match": "\\b((([A-Z][_a-zA-Z0-9]+)::)*([A-Z][_a-zA-Z0-9]+))\\b"
				},
				{
					"name": "entity.name.type.bosque",
					"match": "\\b[A-Z]\\b"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.name",
					"match": "\\b([$]|([$]?([_a-z]|([_a-z][_a-zA-Z0-9]+))))\\b"
				}
			]
		}
	},
	"scopeName": "source.bsq"
}
